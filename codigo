#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Configuración WiFi
const char* WIFI_SSID = "iPhone de Marco";  // Reemplaza con tu SSID
const char* WIFI_PASS = "12345678";         // Reemplaza con tu contraseña

// Configuración MQTT
const char* MQTT_BROKER = "broker.hivemq.com";
const int MQTT_BROKER_PORT = 1883;

const char* MQTT_CLIENT_ID = "6662ea6e478f4e0ea8b510bcec0fab9a";
const char* SUBSCRIBE_TOPIC = "BackInBlack/input";       // Tópico de suscripción
const char* PUBLISH_TEMP_TOPIC = "BackInBlack/output";   // Tópico para la temperatura
const char* PUBLISH_HUM_TOPIC = "BackInBlack/hum";       // Tópico para la humedad

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

// Configuración del sensor de temperatura y humedad
#define DHTPIN 4             // Pin del sensor DHT
#define DHTTYPE DHT11        // Tipo del sensor DHT
DHT dht(DHTPIN, DHTTYPE);    // Creación del objeto DHT

float temperature;
float humidity;
int motorPin = 27;           // Pin del motor (ventilador)

// Función callback que se ejecuta al recibir un mensaje MQTT
void callback(const char* topic, byte* payload, unsigned int length) {
    String message;
    for (int i = 0; i < length; i++) {
        message += (char)payload[i];
    }

    // Verificar si el mensaje pertenece al tópico de suscripción
    if (String(topic) == SUBSCRIBE_TOPIC) {
        Serial.println("Mensaje del tópico " + String(topic) + ": " + message);
        
        // Encender o apagar el ventilador según el mensaje recibido
        if (message == "ON") {
            digitalWrite(motorPin, HIGH);  // Encender el ventilador
            Serial.println("Ventilador encendido");
        } else if (message == "OFF") {
            digitalWrite(motorPin, LOW);   // Apagar el ventilador
            Serial.println("Ventilador apagado");
        }
    }
}

// Función para conectar al broker MQTT
boolean mqttClientConnect() {
    Serial.println("Conectando al broker MQTT...");
    if (mqttClient.connect(MQTT_CLIENT_ID)) {
        Serial.println("Conectado al broker MQTT");
        mqttClient.subscribe(SUBSCRIBE_TOPIC);  // Suscribir al tópico
        Serial.println("Suscrito al tópico: " + String(SUBSCRIBE_TOPIC));
    } else {
        Serial.println("No se pudo conectar al broker MQTT");
    }
    return mqttClient.connected();
}

// Función para conectar a la red WiFi
void connectToWifi() {
    Serial.println("Conectando a la red WiFi...");
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("Conectado a la red WiFi");
}

void setup() {
    pinMode(motorPin, OUTPUT);    // Configurar el pin del motor como salida
    Serial.begin(115200);
    connectToWifi();
    
    // Inicialización del sensor DHT
    dht.begin();
    
    // Configuración del servidor MQTT
    mqttClient.setServer(MQTT_BROKER, MQTT_BROKER_PORT);
    mqttClient.setCallback(callback);
}

void loop() {
    // Leer temperatura y humedad del sensor
    temperature = dht.readTemperature();
    humidity = dht.readHumidity();

    if (isnan(temperature) || isnan(humidity)) {
        Serial.println("Error al leer del sensor DHT");
        return;
    }

    // Conectar al broker MQTT si no está conectado
    if (!mqttClient.connected()) {
        mqttClientConnect();
    }
    mqttClient.loop();  // Mantener la conexión MQTT

    // Publicar la temperatura y la humedad en tópicos separados cada 5 segundos
    static unsigned long lastPublish = 0;
    unsigned long now = millis();
    if (now - lastPublish >= 5000) {  // Publicar cada 5 segundos
        lastPublish = now;
        
        // Publicar la temperatura en el tópico BackInBlack/output
        String tempMessage = String(temperature, 1);
        mqttClient.publish(PUBLISH_TEMP_TOPIC, tempMessage.c_str());
        Serial.println("Temperatura publicada: " + tempMessage + " °C");

        // Publicar la humedad en el tópico BackInBlack/hum
        String humMessage = String(humidity, 1);
        mqttClient.publish(PUBLISH_HUM_TOPIC, humMessage.c_str());
        Serial.println("Humedad publicada: " + humMessage + " %");
    }

    delay(100);
}
